# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application
on: [push]

jobs:
  build:

    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: ["ubuntu-latest"]
        python-version: ["3.12"]
        # python-version: ["3.9", "3.10", "3.12"]
        # Excluding a version 3.10 and OS
        exclude:
          - os: windows-latest
            python-version: "3.10"
          # - os: windows-latest
          #   python-version: "3.12"
        

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # You can test your matrix by printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependency
        run: python3 -m pip install --upgrade pip
      - name: Create a virtual environment
        run: python3 -m venv myenv
      - name: Activate the virtual environment for macOS and Linux
        run: source myenv/bin/activate
      - name: Activate the virtual environment and install packages
        run: |
          source myenv/bin/activate
          pip install SQLAlchemy
          pip install pandas
          pip freeze > requirements.txt
        shell: bash
      # - name: Activate the virtual environment for windows
      #   run: myenv\Scripts\activate
          # Add, commit, and push the requirements.txt to the repository
      - name: Commit and push requirements.txt
        run: |
          git config --global user.name "email4prasanth"
          git config --global user.email "email4prasanth@gmail.com"
          git add requirements.txt
          git commit -m "Add requirements.txt from GitHub Actions"
          git push
        env:
          # Use GitHub token to authenticate the push
          GITHUB_TOKEN: ${{ secrets.PUSHPAT }}
      
